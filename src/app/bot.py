"""
–ú–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç YouTube, Instagram, TikTok, Reddit –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
"""

import logging
from datetime import datetime
from urllib.parse import urlparse
from typing import Optional, Dict, Callable

from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.client.telegram import TelegramAPIServer
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession

from .filters import URLFilter
from .common import ServiceType
from .patterns import DomainMatcher
from .handlers import ServiceHandler
from .callback_handlers import ServiceCallbackHandler


class TelegramBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞.
    """
    
    _instance = None
    _initialized = False
    
    def __new__(cls, *args, **kwargs) -> 'TelegramBot':
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Singleton."""
        if cls._instance is None:
            cls._instance = super(TelegramBot, cls).__new__(cls)
        return cls._instance

    def __init__(
        self, 
        token: str, 
        server_ip: str = "http://localhost:8081", 
        parse_mode: ParseMode = ParseMode.HTML, 
        loglevel: int = logging.INFO
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.
        
        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            server_ip: –ê–¥—Ä–µ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Telegram API —Å–µ—Ä–≤–µ—Ä–∞
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            loglevel: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not self._initialized:
            self.token = token
            self.server_ip = server_ip
            self.parse_mode = parse_mode
            self.loglevel = loglevel
            self.start_time = datetime.now()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
            self.bot: Optional[Bot] = None
            self.dp: Optional[Dispatcher] = None
            self.session: Optional[AiohttpSession] = None
            
            self._setup_logging()
            self._initialize_bot()
            self._register_handlers()
            self._register_callback_handlers()
            
            self._initialized = True
            self.logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
    def _setup_logging(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logging.basicConfig(
            level=self.loglevel,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        self.logger = logging.getLogger(__name__)
        
    def _initialize_bot(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞."""
        self.logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
        self.session = AiohttpSession(
            api=TelegramAPIServer.from_base(self.server_ip)
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
        self.bot = Bot(
            token=self.token,
            session=self.session,
            default=DefaultBotProperties(parse_mode=self.parse_mode)
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.dp = Dispatcher()
        
        self.logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.logger.info("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        self.dp.message.register(self._handle_start, CommandStart())
        self.dp.message.register(self._handle_help, Command("help"))
        self.dp.message.register(self._handle_url_message, URLFilter(check_support=True))
        self.dp.message.register(self._handle_unknown_message)
        
        self.logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    def _register_callback_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –∑–∞–ø—Ä–æ—Å–æ–≤."""
        self.logger.info("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        callback_handlers = {
            "video": ServiceCallbackHandler.handle_video,
            "image": ServiceCallbackHandler.handle_image,
            "audio": ServiceCallbackHandler.handle_auido,
            "thumbnail": ServiceCallbackHandler.handle_thumbnail,
        }
        
        for prefix, handler in callback_handlers.items():
            self.dp.callback_query.register(handler, F.data.startswith(prefix))
            
        self.logger.info("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    async def _handle_start(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_name = message.from_user.full_name
        user_id = message.from_user.id
        
        self.logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        
        welcome_text = (
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–µ–¥–∏–∞ –ë–æ—Ç!</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏.\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:</b>\n"
            "‚Ä¢ YouTube, Instagram, TikTok\n"
            "‚Ä¢ Reddit, Rutube –∏ –¥—Ä—É–≥–∏–µ\n\n"
        )
        
        await message.answer(
            welcome_text,
            parse_mode=ParseMode.HTML
        )
            
    async def _handle_help(self, message: types.Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏."""
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        supported_services = []
        for service_type, domains in DomainMatcher.DOMAIN_PATTERNS.items():
            domain_examples = ", ".join(domains[:3])
            supported_services.append(
                f"‚Ä¢ <b>{service_type.value.upper()}</b> - {domain_examples}..."
            )
            
        help_text = (
            "ü§ñ <b>–ú–µ–¥–∏–∞ –ë–æ—Ç - –ü–æ–º–æ—â—å</b>\n\n"
            "üì• <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, "
            "–∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n"
            "üåê <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b>\n"
            f"{chr(10).join(supported_services)}\n\n"
            "‚ö° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º."
        )
        
        await message.answer(help_text, parse_mode=ParseMode.HTML)
        
    async def _handle_url_message(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL."""
        url = message.text or message.caption
        if not url:
            return

        try:
            parsed = urlparse(url.strip())
            domain = parsed.netloc.lower()
            service_type = DomainMatcher.get_service_type(domain)
            
            self.logger.info(
                f"üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ URL: {url} | "
                f"–î–æ–º–µ–Ω: {domain} | "
                f"–°–µ—Ä–≤–∏—Å: {service_type.value}"
            )
            
            # –ú–∞–ø–ø–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            handler_map: Dict[ServiceType, Callable] = {
                ServiceType.YOUTUBE: ServiceHandler.handle_youtube,
                ServiceType.INSTAGRAM: ServiceHandler.handle_instagram,
                ServiceType.REDDIT: ServiceHandler.handle_reddit,
                ServiceType.RUTUBE: ServiceHandler.handle_rutube,
                ServiceType.TIKTOK: ServiceHandler.handle_tiktok,
            }
            
            if service_type in handler_map:
                await handler_map[service_type](url, message, domain)
            else:
                await self._handle_unsupported_domain(domain, message)
                
        except Exception as e:
            self.stats['errors_count'] += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {url}: {str(e)}", exc_info=True)
            
            error_text = (
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞\n"
                "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏."
            )
            await message.answer(error_text, parse_mode=ParseMode.HTML)
            
    async def _handle_unsupported_domain(self, domain: str, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤."""
        self.logger.warning(f"üö´ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–æ–º–µ–Ω: {domain}")
        
        supported_services = ", ".join(
            service_type.value for service_type in DomainMatcher.DOMAIN_PATTERNS.keys()
        )
        
        response = (
            f"‚ùå <b>–î–æ–º–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ–º–µ–Ω <code>{domain}</code> –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
            f"<b>üîÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>\n"
            f"{supported_services}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
        await message.answer(response, parse_mode=ParseMode.HTML)
        
    async def _handle_unknown_message(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        await message.answer(
            "ü§î <b>–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å",
            parse_mode=ParseMode.HTML
        )

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.stop()
    
    async def stop(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞."""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        if self.session:
            await self.session.close()
        self.logger.info("üëã –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
