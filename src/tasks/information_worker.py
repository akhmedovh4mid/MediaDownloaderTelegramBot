from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple

from .app import (
    app,
    celery_event_loop,
    media_cache_storage,
    user_activity_queue,
    user_session_storage,
)
from .common import get_service_downloader
from .telegram_client import send_photo, send_message, delete_message

from src.core import (
    AbstractServiceResultTypeDict, 
    AbstractServiceAudioTypeDict, 
    AbstractServiceImageTypeDict, 
    AbstractServiceVideoTypeDict,
    AbstractServiceErrorCode,
)


@dataclass
class MediaButton:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    row: int
    label: str
    callback_data: str
    url: Optional[str] = None


class MediaProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    @staticmethod
    def parse_videos(videos: List[AbstractServiceVideoTypeDict]) -> List[MediaButton]:
        """–ü–∞—Ä—Å–∏—Ç –≤–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤"""
        if not videos:
            return []
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–±–µ—Ä–µ–º –ª—É—á—à–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
        video_by_quality: Dict[int, AbstractServiceVideoTypeDict] = {}
        for video in videos:
            if video["width"] is not None:
                current_best = video_by_quality.get(video["width"])
                if not current_best or video.get("total_bitrate", 0) > current_best.get("total_bitrate", 0):
                    video_by_quality[video["width"]] = video
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = []
        qualities = sorted(video_by_quality.keys(), reverse=True)
        
        if len(qualities) == 1:
            video = video_by_quality[qualities[0]]
            buttons.append(MediaButton(
                row=1,
                label="üé¨ Video",
                callback_data=f"video:{video['id']}"
            ))
        else:
            for quality in qualities:
                video = video_by_quality[quality]
                buttons.append(MediaButton(
                    row=1,
                    label=f"üé¨ {video['height']}p",
                    callback_data=f"video:{video['id']}"
                ))
                
        return buttons
    
    @staticmethod
    def parse_audios(audios: List[AbstractServiceAudioTypeDict]) -> Optional[MediaButton]:
        """–ü–∞—Ä—Å–∏—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""
        if not audios:
            return None
            
        # –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—ã—á–Ω–æ –ª—É—á—à–∏–π)
        best_audio = audios[-1]
        return MediaButton(
            row=2,
            label="üéµ Audio",
            callback_data=f"audio:{best_audio['id']}",
            url=best_audio.get("url")
        )
    
    @staticmethod
    def parse_thumbnails(thumbnails: List[AbstractServiceImageTypeDict]) -> Optional[MediaButton]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–µ–≤—å—é –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""
        if not thumbnails:
            return None
            
        # –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ –ø—Ä–µ–≤—å—é (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—ã—á–Ω–æ –ª—É—á—à–∏–π)
        best_thumbnail = thumbnails[-1]
        return MediaButton(
            row=3,
            label="üñºÔ∏è Preview",
            callback_data=f"thumbnail:{best_thumbnail['id']}",
            url=best_thumbnail.get("url")
        )
    
    @staticmethod
    def parse_images(images: List[AbstractServiceImageTypeDict]) -> Optional[MediaButton]:
        """–ü–∞—Ä—Å–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""
        if not images:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤—ã—Å–æ—Ç–µ –∏ –±–µ—Ä–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        images_by_width: Dict[int, List[AbstractServiceImageTypeDict]] = {}
        for image in images:
            width = image["width"]
            if width not in images_by_width:
                images_by_width[width] = []
            images_by_width[width].append(image)
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        max_quality = max(images_by_width.keys()) if images_by_width else 0
        best_images = images_by_width.get(max_quality, [])
        
        if not best_images:
            return None
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
        best_image = best_images[0]
        label = "üñºÔ∏è Image" if len(best_images) == 1 else "üñºÔ∏è Images"
        
        return MediaButton(
            row=1,
            label=label,
            callback_data="image",
            url=best_image.get("url")
        )


def _create_keyboard_layout(buttons: List[Optional[MediaButton]]) -> List[Tuple[int, str, str]]:
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    keyboard_data = []
    for button in buttons:
        if button:
            keyboard_data.append((button.row, button.label, button.callback_data))
    return keyboard_data


@app.task(name="information_worker.get_media_info", queue="information_queue")
def get_media_info(chat_id: int, message_id: int, url: str, service: str) -> None:
    if user_activity_queue.get_extract(chat_id=chat_id):
        return
    
    user_activity_queue.create_extract(chat_id=chat_id, url=url, service=service)
    
    message = celery_event_loop.run_until_complete(
        send_message(
            chat_id=chat_id,
            text="üì• –ü–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É! –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–∞–Ω–Ω—ã–µ..."
        )
    )
    
    celery_event_loop.run_until_complete(
        delete_message(
            chat_id=chat_id,
            message_id=message.message_id,
        )
    )
    
    message = celery_event_loop.run_until_complete(
        send_message(
            chat_id=chat_id,
            text="üîç –ò—â—É –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç... –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
        )
    )
    
    if media := media_cache_storage.get_media(url=url):
        response = AbstractServiceResultTypeDict(
            data=media["data"],
            context=None, 
            status="success", 
            code=AbstractServiceErrorCode.SUCCESS.value, 
        )
    else:
        downloader = get_service_downloader(service=service)
        response = downloader.extract_info(url=url).to_dict()
    
    if response["status"] == "success":
        _handle_success_response(
            response=response,
            url=url,
            service=service,
            chat_id=chat_id,
            message_id=message.message_id
        )
    else:
        _handle_error_response(
            response=response,
            url=url,
            service=service,
            chat_id=chat_id,
            message_id=message.message_id
        )
        
    user_activity_queue.delete_extract(chat_id=chat_id)
        


def _handle_success_response(
    response: AbstractServiceResultTypeDict,
    url: str,
    service: str,
    chat_id: int,
    message_id: int,
) -> None:
    media_data = response["data"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∫–µ—à–∏—Ä—É–µ–º –º–µ–¥–∏–∞
    user_session_storage.create_session(
        chat_id=chat_id,
        url=url,
        service=service,
        media_data=media_data,
    )
    
    media_cache_storage.store_media(
        url=url,
        media_data=media_data,
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    processor = MediaProcessor()
    buttons = []
    preview_url = None
    
    if media_data["is_video"]:
        # –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        buttons.extend(processor.parse_videos(media_data.get("videos", [])))
        
        if audio_button := processor.parse_audios(media_data.get("audios", [])):
            buttons.append(audio_button)
            
        if thumbnail_button := processor.parse_thumbnails(media_data.get("thumbnails", [])):
            buttons.append(thumbnail_button)
            preview_url = thumbnail_button.url
            
    elif media_data["is_image"]:
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image_button := processor.parse_images(media_data.get("images", [])):
            buttons.append(image_button)
            preview_url = image_button.url
            
        if audio_button := processor.parse_audios(media_data.get("audios", [])):
            buttons.append(audio_button)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard_data = _create_keyboard_layout(buttons)
    
    caption = (
        f"‚úÖ –ú–µ–¥–∏–∞ –≥–æ—Ç–æ–≤–æ!\n\n"
        f"üìπ –°–µ—Ä–≤–∏—Å: {service}\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {media_data['author_name']}\n"
        f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {media_data['title']}\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    celery_event_loop.run_until_complete(
        delete_message(
            chat_id=chat_id,
            message_id=message_id,
        )
    )
    
    celery_event_loop.run_until_complete(
        send_photo(
            chat_id=chat_id,
            caption=caption,
            preview_url=preview_url,
            keyboard_data=keyboard_data
        )
    )


def _handle_error_response(
    response: AbstractServiceResultTypeDict,
    url: str,
    service: str,
    chat_id: int,
    message_id: int,
) -> None:
    downloader = get_service_downloader(service=service)
    
    celery_event_loop.run_until_complete(
        delete_message(
            chat_id=chat_id,
            message_id=message_id,
        )
    )
    
    celery_event_loop.run_until_complete(
        send_message(
            chat_id=chat_id,
            text=f"‚ùå –û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.\n–ü—Ä–∏—á–∏–Ω–∞: {downloader.get_error_description(response['code'])}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É üòâ"
        )
    )
