from .common import get_service_downloader
from .app import app, celery_event_loop, user_activity_queue
from .telegram_client import send_video, send_message, send_audio, delete_message

from src.config import settings


def _notify_user_start(chat_id: int, media_type: str) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    message = celery_event_loop.run_until_complete(
        send_message(
            chat_id=chat_id,
            text=f"üì• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É {media_type}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥"
        )
    )
    return message.message_id


def _handle_download_result(chat_id: int, message_id: int, result, media_type: str, **kwargs):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    celery_event_loop.run_until_complete(delete_message(chat_id=chat_id, message_id=message_id))

    if result.status == "success":
        if media_type == "video":
            celery_event_loop.run_until_complete(send_video(chat_id=chat_id, **kwargs))
        elif media_type == "audio":
            celery_event_loop.run_until_complete(send_audio(chat_id=chat_id, **kwargs))
    else:
        celery_event_loop.run_until_complete(
            send_message(chat_id=chat_id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {media_type}!")
        )

    # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user_activity_queue.delete_download(chat_id=chat_id)


@app.task
def download_youtube_video(chat_id: int, message_id: int, video_id: str, url: str, width: int, height: int) -> None:
    msg_id = _notify_user_start(chat_id, "–≤–∏–¥–µ–æ YouTube")
    
    downloader = get_service_downloader(service="youtube")
    result = downloader.download_video(
        url=url, 
        video_format_id=video_id, 
        output_path=settings.media_storage_path
    )
    
    _handle_download_result(
        chat_id, 
        msg_id, 
        result, 
        media_type="video", 
        path=result.data.path, 
        width=width, 
        height=height
    )


@app.task
def download_reddit_video(chat_id: int, message_id: int, video_id: str, url: str, width: int, height: int) -> None:
    msg_id = _notify_user_start(chat_id, "–≤–∏–¥–µ–æ Reddit")
    
    downloader = get_service_downloader(service="reddit")
    result = downloader.download_video(
        url=url, 
        video_format_id=video_id, 
        output_path=settings.media_storage_path
    )
    
    _handle_download_result(
        chat_id, 
        msg_id, 
        result, 
        media_type="video", 
        path=result.data.path, 
        width=width, 
        height=height
    )


@app.task
def download_rutube_video(chat_id: int, message_id: int, video_id: str, url: str, width: int, height: int) -> None:
    msg_id = _notify_user_start(chat_id, "–≤–∏–¥–µ–æ RuTube")
    
    downloader = get_service_downloader(service="rutube")
    result = downloader.download_video(
        url=url, 
        video_format_id=video_id, 
        output_path=settings.media_storage_path
    )
    
    _handle_download_result(
        chat_id, 
        msg_id, 
        result, 
        media_type="video", 
        path=result.data.path, 
        width=width, 
        height=height
    )


@app.task
def download_tiktok_video(chat_id: int, message_id: int, video_id: str, url: str, width: int, height: int) -> None:
    msg_id = _notify_user_start(chat_id, "–≤–∏–¥–µ–æ TikTok")
    
    downloader = get_service_downloader(service="tiktok")
    result = downloader.download_video(
        url=url, 
        video_format_id=video_id, 
        output_path=settings.media_storage_path
    )

    _handle_download_result(
        chat_id, 
        msg_id, 
        result, 
        media_type="video", 
        path=result.data.path, 
        width=width, 
        height=height
    )


@app.task
def download_audio(chat_id: int, message_id: int, service: str, audio_id: str, url: str) -> None:
    msg_id = _notify_user_start(chat_id, "–∞—É–¥–∏–æ")
    
    downloader = get_service_downloader(service=service)
    result = downloader.download_audio(
        url=url, 
        audio_format_id=audio_id, 
        output_path=settings.media_storage_path
    )

    _handle_download_result(
        chat_id, 
        msg_id, 
        result, 
        media_type="audio", 
        path=result.data.path
    )
